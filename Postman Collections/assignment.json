{
	"info": {
		"_postman_id": "45c4c965-b5bd-4d57-beca-82b9b5ef9d4a",
		"name": "Assignment Module",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Create Assignment",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ec359da5-1c92-400b-b80c-ce6355c4fb32",
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"const response = pm.response.json();\r",
							"pm.globals.set(\"assignmentId\", response.assignmentId);\r",
							"pm.globals.set(\"assignmentDueDate\", response.dueDate);\r",
							"\r",
							"const reqBody = JSON.parse(pm.request.body.raw);\r",
							"// test to check the mandatory fields should not be null, need to validate if the assignment Name is unique)\r",
							"pm.test(\"Verify the mandatory fields are not null\", function () {\r",
							"    pm.expect(reqBody.assignmentName).to.not.null;\r",
							"    pm.expect(reqBody.assignmentDescription).to.not.null;\r",
							"    pm.expect(reqBody.createdBy).to.not.null;\r",
							"    pm.expect(reqBody.batchId).to.not.null;\r",
							"    pm.expect(reqBody.dueDate).to.not.null;\r",
							"    pm.expect(reqBody.graderId).to.not.null;\r",
							"    \r",
							"});\r",
							"\r",
							"/*var reqBodyDueDate = reqBody.dueDate;\r",
							"console.log(reqBodyDueDate);*/\r",
							"\r",
							"//var moment = require(moment);\r",
							"/*pm.test(\"Checking data format\", function () {\r",
							"    pm.expect(reqBodyDueDate).to.include(moment(reqBodyDueDate).format('YYYY-MM-DDTHH:mm:ss:sssZ'));\r",
							"    pm.expect(reqBodyDueDate).to.match(/^\\d{4}-\\d{2}-\\d{2}\\T\\d{2}:\\d{2}.\\d{3}\\Z$/);\r",
							"    pm.expect(reqBodyDueDate).to.match(/YYYY-MM-DDTHH:mm:ss:sssZ/);\r",
							"});*/\r",
							"\r",
							"const iterationCount = pm.info.iterationCount;\r",
							"console.log(iterationCount);\r",
							"const currentIteration = (pm.info.iteration);\r",
							"console.log(currentIteration);\r",
							"pm.collectionVariables.set(\"currentIteration\", currentIteration);\r",
							"pm.collectionVariables.set(\"iterationCount\", iterationCount);\r",
							"if ((currentIteration + 1) < iterationCount)\r",
							"{\r",
							"    postman.setNextRequest(null);\r",
							"}\r",
							"else\r",
							"{\r",
							"    postman.setNextRequest(\"Get All Assignment\");\r",
							"}\r",
							"\r",
							"const schema = {\r",
							"\"type\": \"object\",\r",
							"\"properties\":{\r",
							"    \"assignmentId\": {\r",
							"        \"type\" : \"integer\"\r",
							"    },\r",
							"    \"assignmentName\": {\r",
							"        \"type\" : \"string\"\r",
							"    },\r",
							"    \"batchId\": {\r",
							"        \"type\" : \"integer\"\r",
							"    },\r",
							"    \"comments\": {\r",
							"       \"type\" : \"string\"\r",
							"    },\r",
							"    \"createdBy\": {\r",
							"        \"type\" : \"string\"\r",
							"    },\r",
							"    \"dueDate\": {\r",
							"        \"type\" : \"string\"        \r",
							"    },\r",
							"    \"graderId\": {\r",
							"        \"type\" : \"string\"\r",
							"    }\r",
							"}\r",
							"};\r",
							"\r",
							"\r",
							"pm.test(\"Validating schema\", () => {\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "9d31f758-03c1-455f-b713-895a56ed5d70",
						"exec": [
							"//script to create serialnumber at the end of the Assignment as per the Hackathon guidelines\r",
							"//const serialNo = Math.floor(Math.random()* 1000);\r",
							"const serialNo = Math.floor(Math.random()* 900) +100;\r",
							"pm.environment.set(\"serialNumber\", serialNo.toString());\r",
							"\r",
							"//to set dueDate 14 days from current date/assignment creation date\r",
							"//Due Date in Assignments should be entered in YYYY-MM-DD HH:MI:SS\r",
							"var moment=require('moment');\r",
							"var dueDate = moment().add(7, 'days').format(\"YYYY-MM-DDTHH:MM.SSSZ\");\r",
							"pm.collectionVariables.set(\"dueDate\", dueDate);\r",
							"\r",
							"//to store assignment description in access it based on the assignment name in requestbody\r",
							"\r",
							"pm.collectionVariables.set(\"assignmentName\", pm.iterationData.get('assignmentName'));\r",
							"let nameofAssignment = pm.collectionVariables.get(\"assignmentName\");\r",
							"console.log(nameofAssignment);\r",
							"\r",
							"const assignmentDescriptions = [\r",
							"    \"This assignemnt is to understand the basics of Java - Access Specifiers, Constructors, OOPS, Collections\",\r",
							"    \"This assignemnt is to understand the  basic concepts of Selenium - Elementlocators, Waits, Driver/Core functions\",\r",
							"]\r",
							"if (nameofAssignment == \"Jun23-PostmanPros-SDET-Java Assignment-\"){\r",
							"    pm.collectionVariables.set(\"assignmentDescription\",assignmentDescriptions[0]);\r",
							"    console.log(pm.collectionVariables.get(\"assignmentDescription\"));    \r",
							"}\r",
							"else if(nameofAssignment == \"Jun23-PostmanPros-SDET-Selenium Assignment-\"){\r",
							"    pm.collectionVariables.set(\"assignmentDescription\",assignmentDescriptions[1]);\r",
							"    console.log(pm.collectionVariables.get(\"assignmentDescription\"));\r",
							"}\r",
							"\r",
							"//CreatedBy  - Should be Admin / Staff , Only active users can create assignment\r",
							"\r",
							"\r",
							"//script to format dueDate as per contract testing document  YYYY-MM-DD HH:MI:SS\r",
							"//const moment = require('moment');\r",
							"//pm.collectionVariables.set(\"dueDate\", moment().format(\"YYYY-MM-DDTHH:MM.SSZ\"))\r",
							"/*var dateNow = new Date();  \r",
							"var assignmentDueDate = new Date(dateNow.setDate(dateNow.getDate() + 14)).toISOString();\r",
							"pm.collectionVariables.set(\"dueDate\", moment().format(\"YYYY-MM-DDTHH:MI.SSZ\"))*/\r",
							"//postman.setEnvironmentVariable(\"future-date\", twoWeeksFutureDate);\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "51cc30c4-87d3-40b1-a8ad-742628e57b0d",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"assignmentDescription\": \"{{assignmentDescription}}\",\r\n  \"assignmentName\": \"{{assignmentName}}{{serialNumber}}\",\r\n  \"batchId\": \"{{batchId}}\",\r\n  \"comments\": \"{{comments}}\",\r\n  \"createdBy\": \"U117\",\r\n  \"dueDate\": \"{{dueDate}}\",\r\n  \"graderId\": \"{{StaffID}}\",\r\n  \"pathAttachment1\": \"{{pathAttachment1}}\",\r\n  \"pathAttachment2\": \"{{pathAttachment2}}\",\r\n  \"pathAttachment3\": \"{{pathAttachment3}}\"\r\n }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{BaseUrl}}/assignments"
			},
			"response": []
		},
		{
			"name": "Get All Assignment",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f78ce632-3f1b-4254-81c8-e38d403f3a8e",
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"console.log(pm.response.status);\r",
							"console.log(pm.response.code);"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "8c2fc7f0-49e3-4373-9d81-b4445a20852b",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": "{{BaseUrl}}/assignments"
			},
			"response": []
		},
		{
			"name": "Get Assignments By ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a20a7e7f-a4b5-41f8-93d2-d12221646e16",
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"console.log(pm.response.status);\r",
							"console.log(pm.response.code);"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "f0ab4438-d88f-4fcc-a95e-5f2388bd7f0d",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseUrl}}/assignments/:assignmentId",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"assignments",
						":assignmentId"
					],
					"variable": [
						{
							"key": "assignmentId",
							"value": "{{assignmentId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Assignment By Invalid AssignmentID",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "69bfb036-6521-4224-918c-773ba1c0215a",
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"console.log(pm.response.status);\r",
							"console.log(pm.response.code);\r",
							"\r",
							"const response = pm.response.json();\r",
							"pm.test(\"Response message is validated\", () => {\r",
							"  var invalidAssignmentId = pm.request.url.path[2];\r",
							"  //console.log(pm.request.url.path[2]);\r",
							"  const expectedObject = {\r",
							"    \"message\": \"Assignment not found with Id : \" +invalidAssignmentId+\" \",\r",
							"    \"success\": false\r",
							"  };\r",
							"\r",
							"pm.expect(pm.response.json()).to.deep.include(expectedObject);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "544efdcf-cbb7-45f3-9708-d031eb629704",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseUrl}}/assignments/:assignmentId",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"assignments",
						":assignmentId"
					],
					"variable": [
						{
							"key": "assignmentId",
							"value": "0"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Assignments for Batch",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c5bf14d9-bfcc-4771-afe6-f3c6bb3eaabf",
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"console.log(pm.response.status);\r",
							"console.log(pm.response.code);"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "48dd2ddf-1f09-44d2-99a1-18fb67c5b4a1",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseUrl}}/assignments/batch/:batchId",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"assignments",
						"batch",
						":batchId"
					],
					"variable": [
						{
							"key": "batchId",
							"value": "{{batchId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Assignment by BatchId with no AssignmentId",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "9361c5e7-91a8-4e33-8e7c-7bd6bc006357",
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"console.log(pm.response.status);\r",
							"console.log(pm.response.code);\r",
							"\r",
							"const response = pm.response.json();\r",
							"pm.test(\"Response message is validated\", () => {\r",
							"  var batchId = pm.request.url.path[3];\r",
							"  //console.log(pm.request.url);\r",
							"  const expectedObject = {\r",
							"    \"message\": \"Assignments not found with BatchId : \" +batchId+\" \",\r",
							"    \"success\": false\r",
							"  };\r",
							"\r",
							"pm.expect(pm.response.json()).to.deep.include(expectedObject);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "d357b243-d209-4cae-b257-43f5ba320a47",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseUrl}}/assignments/batch/:batchId",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"assignments",
						"batch",
						":batchId"
					],
					"variable": [
						{
							"key": "batchId",
							"value": "964"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Assignment for Invalid Batch",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "0b36bba0-4c41-4a8d-8d32-892c6bc49b93",
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"console.log(pm.response.status);\r",
							"console.log(pm.response.code);\r",
							"\r",
							"const response = pm.response.json();\r",
							"pm.test(\"Response message is validated\", () => {\r",
							"  var invalidBatchId = pm.request.url.path[3];\r",
							"  //console.log(pm.request.url);\r",
							"  const expectedObject = {\r",
							"    \"message\": \"Batch not found with Id : \"+invalidBatchId+\" \",\r",
							"    \"success\": false\r",
							"  };\r",
							"\r",
							"pm.expect(pm.response.json()).to.deep.include(expectedObject);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "0a6f2731-42a6-4954-9551-ebd5aaec2ecf",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseUrl}}/assignments/batch/:batchId",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"assignments",
						"batch",
						":batchId"
					],
					"variable": [
						{
							"key": "batchId",
							"value": "0"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Assignment",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c152b3d5-87f3-4f5a-a55b-29682b71fe1c",
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "79226f22-d3ae-4024-a48a-cf481104241e",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{   \r\n  \"assignmentDescription\": \"Test Assignment 1\",\r\n  \"assignmentName\": \"{{programName}}-Updated\",\r\n  \"batchId\": 1,\r\n  \"comments\": \"Comments are updated\",\r\n  \"createdBy\": \"U22\",\r\n  \"dueDate\": \"2023-06-19T22:02:28.140Z\",\r\n  \"graderId\": \"{{StaffID}}\",\r\n  \"pathAttachment1\": \"string\",\r\n  \"pathAttachment2\": \"string\",\r\n  \"pathAttachment3\": \"string\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseUrl}}/assignments/:assignmentId",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"assignments",
						":assignmentId"
					],
					"variable": [
						{
							"key": "assignmentId",
							"value": "{{assignmentId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete with ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3532b6a8-f30b-4a99-acc2-d91bd8f98f67",
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"console.log(pm.response.status);\r",
							"console.log(pm.response.code);\r",
							"\r",
							"const response = pm.response.json();\r",
							"pm.test(\"Response message is validated\", () => {\r",
							"  //var invalidAssignmentId = pm.request.url.path[2];\r",
							"  //console.log(pm.request.url.path[2]);\r",
							"  const expectedObject = {\r",
							"    \"message\": \"Assignment deleted successfully\",\r",
							"    \"success\": true\r",
							"};\r",
							"\r",
							"pm.expect(pm.response.json()).to.deep.include(expectedObject);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "76adea01-1e7c-4184-b20d-e95c83af2fcc",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{BaseUrl}}/assignments/:assignmentId",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"assignments",
						":assignmentId"
					],
					"variable": [
						{
							"key": "assignmentId",
							"value": "{{assignmentId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete with Invalid ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "bf07524d-a6c6-484c-b69e-2a5a21365d8e",
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);    \r",
							"});\r",
							"\r",
							"pm.test(\"Status code name has string Not Found\", function () {\r",
							"    pm.response.to.have.status(\"Not Found\");    \r",
							"});\r",
							"\r",
							"console.log(pm.response.status);\r",
							"console.log(pm.response.code);\r",
							"\r",
							"const response = pm.response.json();\r",
							"pm.test(\"Response message is validated\", () => {\r",
							"  var invalidAssignmentId = pm.request.url.path[2];\r",
							"  //console.log(pm.request.url.path[2]);\r",
							"  const expectedObject = {\r",
							"    \"message\": \"Assignment not found with Id : \"+invalidAssignmentId+\" \",\r",
							"    \"success\": false\r",
							"};\r",
							"\r",
							"pm.expect(pm.response.json()).to.deep.include(expectedObject);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "0021e970-c0f3-4c11-9ba6-94cd87d042de",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{BaseUrl}}/assignments/:assignmentId",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"assignments",
						":assignmentId"
					],
					"variable": [
						{
							"key": "assignmentId",
							"value": "0"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "b287b59c-a380-4c43-b4d6-003e4ee47630",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "2820e8a9-6e4c-4c25-b6e3-d2959b44ed02",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "98ee0e69-e8c5-4831-bd27-8adf41e5df0e",
			"key": "assignmentDescForJava",
			"value": "This assignemnt is to understand the basics of Java - Access Specifiers, Constructors, OOPS, Collections",
			"type": "string",
			"disabled": true
		},
		{
			"id": "d90d09c0-24c2-4177-bf14-2826790a2a97",
			"key": "assignmentDescForSelenium",
			"value": "This assignemnt is to understand the  basic concepts of Selenium - Elementlocators, Waits, Driver/Core functions, ",
			"type": "string",
			"disabled": true
		},
		{
			"id": "a7cc7358-cb78-4caa-a971-a155075a3858",
			"key": "assignmentDescForTestNG",
			"value": "This assignment is to understand the TestNg Annotations",
			"type": "string",
			"disabled": true
		},
		{
			"id": "a0636fa9-ac31-484f-9667-73e0b0c43a2b",
			"key": "assignmentDescForCucumber",
			"value": "This assignment is to understand the  test case implementation in Cucumber",
			"type": "string",
			"disabled": true
		},
		{
			"id": "2e5e0cf2-9feb-4e85-bbed-5d7513850b36",
			"key": "dueDate",
			"value": "",
			"disabled": true
		},
		{
			"id": "f4fa2c10-a58b-4661-9fbb-6022c2813cde",
			"key": "currentIteration",
			"value": ""
		},
		{
			"id": "f06b5ad4-7b59-491e-b243-f4bd953cd426",
			"key": "iterationCount",
			"value": ""
		},
		{
			"id": "35d4e1f8-d8ff-42c4-bb92-a84a2950d020",
			"key": "dueDate",
			"value": ""
		},
		{
			"id": "becbe56a-527f-4f8c-8cdd-ea9699a4719b",
			"key": "assignmentName",
			"value": ""
		},
		{
			"id": "303f135a-6977-4939-820b-5d2c1bda9808",
			"key": "assignmentDescription",
			"value": ""
		}
	]
}